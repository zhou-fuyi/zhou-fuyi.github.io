(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{342:function(a,v,t){"use strict";t.r(v);var r=t(7),_=Object(r.a)({},(function(){var a=this,v=a._self._c;return v("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[v("h2",{attrs:{id:"_1-为什么-java-需要运行时环境"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-为什么-java-需要运行时环境"}},[a._v("#")]),a._v(" 1. 为什么 Java 需要运行时环境")]),a._v(" "),v("h3",{attrs:{id:"_1-1-java-程序的启动方式"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-1-java-程序的启动方式"}},[a._v("#")]),a._v(" 1.1. Java 程序的启动方式")]),a._v(" "),v("ul",[v("li",[a._v("IDE中启动，比如：Eclipse、IntelliJ IDEA")]),a._v(" "),v("li",[a._v("构建为 jar，通过命令行的方式启动，比如：java -jar application.jar")]),a._v(" "),v("li",[a._v("使用构建工具（如：Gradle、Maven）启动，比如 SpringBoot 应用启动：gradle bootRun、mvn spring-boot:run")])]),a._v(" "),v("h3",{attrs:{id:"_1-2-jre-是什么"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-2-jre-是什么"}},[a._v("#")]),a._v(" 1.2. JRE 是什么")]),a._v(" "),v("p",[a._v("在这里引用极客时间课程"),v("a",{attrs:{href:"https://time.geekbang.org/column/article/6845",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java核心技术面试精讲"),v("OutboundLink")],1),a._v("中的一段话")]),a._v(" "),v("p",[a._v("我们日常会接触到 "),v("strong",[a._v("JRE（Java Runtime Environment）")]),a._v(" 或者 "),v("strong",[a._v("JDK（Java Development Kit）")]),a._v("。"),v("strong",[a._v("JRE")]),a._v("，也就是 Java 运行时环境，仅包含运行 Java 程序的必须组件，包括 Java 虚拟机以及 Java 核心类库等。而 "),v("strong",[a._v("JDK")]),a._v(" 可以看作是 "),v("strong",[a._v("JRE")]),a._v(" 的一个超集，提供了更多工具，比如编译器、各种诊断工具等。")]),a._v(" "),v("h3",{attrs:{id:"_1-3-为什么需要运行时环境"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_1-3-为什么需要运行时环境"}},[a._v("#")]),a._v(" 1.3. 为什么需要运行时环境")]),a._v(" "),v("p",[a._v("不是有这么一句话么，计算机科学领域的任何问题都可以通过增加一个间接的中间层来解决。话说回来，Java 代码运行之所以需要运行时环境，主要是由于以下几个方面的原因：")]),a._v(" "),v("ul",[v("li",[v("p",[a._v("Java 语言语法非常复杂，抽象程度高，直接在硬件上运行这种复杂的程序并不现实（并不是不可以，但是这样造成与相应硬件的强耦合，且不便于抽象和复杂语法的实现。），所以需要在运行之前进行一番转换。")])]),a._v(" "),v("li",[v("p",[a._v("实现平台无关性、做到 “Write once, run anywhere”，获得跨平台的能力。这样便需要一个中间层进行解耦，达到上层统一编码、下层跨越平台、中间实现兼容（所以，Java 语言的跨平台特性是由 Java 运行时环境实现的。也就是在不同平台皆有与之相对应的 Java 运行时环境，实现相同定义、不同实现。这样的思想是不是很熟悉，当然，这仅是我的理解）。")])]),a._v(" "),v("li",[v("p",[a._v("提供托管环境（Managed Runtime），该托管环境可以代替我们处理一些通用的、容易出错的、高难度的行为，比如自动内存管理、垃圾回收、安全权限动态检测等。")])])]),a._v(" "),v("h2",{attrs:{id:"_2-java-代码在虚拟机中是怎样运行的"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-java-代码在虚拟机中是怎样运行的"}},[a._v("#")]),a._v(" 2. Java 代码在虚拟机中是怎样运行的")]),a._v(" "),v("h3",{attrs:{id:"_2-1-虚拟机视角"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-虚拟机视角"}},[a._v("#")]),a._v(" 2.1. 虚拟机视角")]),a._v(" "),v("p",[a._v("执行 Java 代码首先需要将它编译而成的 class 文件加载到 Java 虚拟机中，加载后的 Java 类会被存放到方法区中。实际运行时，虚拟机会执行方法区内的代码（需要将字节码翻译为机器码，在 HotSpot 实现中，有解释执行和即时编译两种）。")]),a._v(" "),v("p",[a._v("下图为 Java虚拟机的整体内存结构图（并不细致），从图中可以看到，Java 虚拟机将栈细分为 Java 方法栈（Java 虚拟机栈）和面向本地方法（用 C++ 写的 native 方法）的本地方法栈，以及存放各个线程的 PC 寄存器（每个线程都有自己的 PC 寄存器，也是该线程启动时创建的）。")]),a._v(" "),v("p",[v("img",{attrs:{src:"/geektime-learning/dig-into-the-java-virtual-machine/%E6%B7%B1%E5%85%A5Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E7%AC%AC%E4%B8%80%E8%AE%B2%E2%80%94%E2%80%94Java%E8%99%9A%E6%8B%9F%E6%9C%BA%E5%86%85%E5%AD%98%E6%A8%A1%E5%9E%8B.png",alt:"深入Java虚拟机第一讲——Java虚拟机内存模型"}})]),a._v(" "),v("p",[a._v("在运行过程中，每当调用进入一个 Java 方法，Java 虚拟机会在当前线程的 Java 方法栈中生成一个栈帧（并入栈），用于存放局部变量以及字节码的操作数。这个栈帧的大小是提前计算好的（编译为字节码的过程中计算的），而且 Java 虚拟机不要求栈帧在内存空间里连续分布。当退出当前执行的方法是，不管是正常返回还是异常返回，Java 虚拟机均会将该方法对应的栈帧弹出（出栈并舍弃）。")]),a._v(" "),v("h3",{attrs:{id:"_2-2-硬件视角"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_2-2-硬件视角"}},[a._v("#")]),a._v(" 2.2. 硬件视角")]),a._v(" "),v("p",[a._v("Java 字节码无法在硬件上直接执行，因此，Java 虚拟机需要将字节码翻译成机器码。在 HotSpot 里面，上述翻译过程有两种形式：第一种是解释执行，即逐条将字节码翻译成机器码执行；第二种是即时编译（JIT），即将一个方法中包含的所有字节编译成机器码后再执行。（编译执行与编译执行的区别可类比为同声传译与放录音，同声传译每一次都需要完整的执行，但是不需要过多等待；而放录音则是一劳永逸，但是存在第一次的录音的过程）")]),a._v(" "),v("p",[a._v("解释执行的优势在于无需等待编译，而即时编译的优势在于实际运行速度更快。HotSpot 默认采用混合模式，综合了解释执行和即时编译两者的优点。它会先解释执行字节码，而后将其中反复执行的热点代码，以方法为单位进行即时编译。")]),a._v(" "),v("h2",{attrs:{id:"_3-作业解析"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_3-作业解析"}},[a._v("#")]),a._v(" 3. 作业解析")]),a._v(" "),v("p",[a._v("--\x3e 待办")]),a._v(" "),v("h2",{attrs:{id:"_4-总结"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_4-总结"}},[a._v("#")]),a._v(" 4. 总结")]),a._v(" "),v("p",[a._v("Java 需要运行时环境支持的原因主要有：")]),a._v(" "),v("ul",[v("li",[a._v("语法复杂、高度抽象")]),a._v(" "),v("li",[a._v("实现跨平台")]),a._v(" "),v("li",[a._v("提供托管环境")])]),a._v(" "),v("p",[a._v("Java 虚拟机将运行时内存区域划分为五个部分，分别为方法区、堆、PC 寄存器、Java 方法栈和本地方法栈。Java 程序编译而成的 class 文件，需要先加载至方法区中，方能在 Java 虚拟机中运行。")]),a._v(" "),v("h2",{attrs:{id:"_5-参考"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_5-参考"}},[a._v("#")]),a._v(" 5. 参考")]),a._v(" "),v("ul",[v("li",[v("a",{attrs:{href:"https://time.geekbang.org/column/article/6845",target:"_blank",rel:"noopener noreferrer"}},[a._v("Java核心技术面试精讲"),v("OutboundLink")],1)]),a._v(" "),v("li",[v("a",{attrs:{href:"https://time.geekbang.org/column/article/11289",target:"_blank",rel:"noopener noreferrer"}},[a._v("深入拆解Java虚拟机"),v("OutboundLink")],1)])]),a._v(" "),v("h2",{attrs:{id:"_6-说明"}},[v("a",{staticClass:"header-anchor",attrs:{href:"#_6-说明"}},[a._v("#")]),a._v(" 6. 说明")]),a._v(" "),v("div",{staticClass:"language- extra-class"},[v("pre",[v("code",[a._v("我不是在卖课\n\n本文大部分内容来源于极客时间以及网络博文节选，如有冒犯，我先向您道歉，另还请告知我进行处理，谢谢\n邮箱：thread_zhou@126.com\n")])])])])}),[],!1,null,null,null);v.default=_.exports}}]);